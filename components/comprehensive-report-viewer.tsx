"use client"
import type { ComprehensiveReportData, AllergyData } from "@/types/report-types"
import React from "react"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"

interface ComprehensiveReportViewerProps {
  reportData: ComprehensiveReportData
}

const SectionTitle = ({ title, icon }: { title: string; icon: string }) => (
  <h2 className="text-3xl font-bold text-gray-800 mb-6 flex items-center gap-3 page-break-before">
    <span className="text-4xl">{icon}</span>
    {title}
  </h2>
)

const SubSectionTitle = ({ title, icon }: { title: string; icon?: string }) => (
  <h3 className="text-2xl font-semibold text-gray-700 mb-4 mt-8 flex items-center gap-2">
    {icon && <span className="text-2xl">{icon}</span>}
    {title}
  </h3>
)

const DataCard = ({ title, children }: { title: string; children: React.ReactNode }) => (
  <Card className="border-2 border-gray-200 bg-gray-50/50 shadow-sm">
    <CardHeader className="pb-2">
      <CardTitle className="text-lg font-semibold text-gray-800">{title}</CardTitle>
    </CardHeader>
    <CardContent className="text-sm text-gray-700">{children}</CardContent>
  </Card>
)

export default function ComprehensiveReportViewer({ reportData }: ComprehensiveReportViewerProps) {
  const {
    patientInfo,
    content,
    settings,
    dynamicDietFieldDefinitions, // NEW
    patientDietAnalysisResults, // NEW
    nutritionData,
    sportsAndFitness,
    lifestyleConditions,
    metabolicCore,
    digestiveHealth,
    genesAndAddiction,
    sleepAndRest,
    allergiesAndSensitivity,
    geneTestResults,
    metabolicSummary,
    preventiveHealth,
    familyGeneticImpact,
    summaries,
  } = reportData

  const getImpactColor = (impact: string) => {
    if (impact.toLowerCase().includes("high") || impact.toLowerCase().includes("increased")) {
      return "bg-red-100 text-red-800 border-red-300"
    }
    if (impact.toLowerCase().includes("low") || impact.toLowerCase().includes("reduced")) {
      return "bg-green-100 text-green-800 border-green-300"
    }
    if (
      impact.toLowerCase().includes("normal") ||
      impact.toLowerCase().includes("average") ||
      impact.toLowerCase().includes("balanced")
    ) {
      return "bg-blue-100 text-blue-800 border-blue-300"
    }
    return "bg-gray-100 text-gray-800 border-gray-300"
  }

  const getStatusColor = (status: "strength" | "improvement") => {
    return status === "strength"
      ? "bg-green-100 text-green-800 border-green-300"
      : "bg-red-100 text-red-800 border-red-300"
  }

  // Helper to group dynamic diet fields by category
  const groupedDietFields = patientDietAnalysisResults.reduce(
    (acc, result) => {
      const fieldDef = dynamicDietFieldDefinitions.find((def) => def.id === result.fieldId)
      if (fieldDef) {
        if (!acc[fieldDef.category]) {
          acc[fieldDef.category] = []
        }
        acc[fieldDef.category].push({ ...result, label: fieldDef.label })
      }
      return acc
    },
    {} as Record<string, (typeof patientDietAnalysisResults)[0] & { label: string }[]>,
  )

  return (
    <div className="container mx-auto py-10 px-6 max-w-4xl bg-white shadow-lg min-h-screen">
      {/* Report Header */}
      <header
        className="text-center mb-12 py-8 rounded-lg"
        style={{ backgroundColor: settings.headerColor, color: "#fff" }}
      >
        <h1 className="text-5xl font-extrabold mb-2" style={{ fontFamily: settings.fonts.primary }}>
          {settings.title}
        </h1>
        <p className="text-2xl font-light" style={{ fontFamily: settings.fonts.secondary }}>
          {settings.subtitle}
        </p>
        <p className="text-lg mt-4" style={{ fontFamily: settings.fonts.secondary }}>
          Patient: <span className="font-semibold">{patientInfo.name}</span> | Sample Code:{" "}
          <span className="font-mono">{patientInfo.sampleCode}</span>
        </p>
        <p className="text-md" style={{ fontFamily: settings.fonts.secondary }}>
          Report Date: {patientInfo.reportDate} | Generated by: {settings.companyName}
        </p>
      </header>

      {/* Patient Information */}
      <SectionTitle title="Patient Information" icon="👤" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        <DataCard title="Name">
          <p>{patientInfo.name}</p>
        </DataCard>
        <DataCard title="Gender">
          <p>{patientInfo.gender}</p>
        </DataCard>
        <DataCard title="Birth Date">
          <p>{patientInfo.birthDate}</p>
        </DataCard>
        <DataCard title="Sample Code">
          <p className="font-mono">{patientInfo.sampleCode}</p>
        </DataCard>
        <DataCard title="Sample Collection Date">
          <p>{patientInfo.sampleDate}</p>
        </DataCard>
        <DataCard title="Report Generation Date">
          <p>{patientInfo.reportDate}</p>
        </DataCard>
        <DataCard title="Report Authentication & Analytics">
          <p>{patientInfo.reportAuth}</p>
        </DataCard>
        <DataCard title="Genomic Data Analytics">
          <p>{patientInfo.genomicAnalytics}</p>
        </DataCard>
        <DataCard title="Checked & Verified By">
          <p>{patientInfo.checkedBy}</p>
        </DataCard>
        <DataCard title="Scientific Content Verified By">
          <p>{patientInfo.scientificContent}</p>
        </DataCard>
      </div>
      <Separator className="my-12" />

      {/* Report Content */}
      <SectionTitle title="Report Content" icon="📝" />
      <div className="space-y-8 mb-8">
        <DataCard title="Disclaimer">
          <p className="text-justify">{content.disclaimer}</p>
        </DataCard>
        <DataCard title="Welcome Letter Introduction">
          <p className="text-justify">{content.introduction}</p>
        </DataCard>
        <DataCard title="What is Genomics?">
          <p className="text-justify">{content.genomicsExplanation}</p>
        </DataCard>
        <DataCard title="Genes and Health Impact">
          <p className="text-justify">{content.genesHealthImpact}</p>
        </DataCard>
        <DataCard title="Fundamentals and PRS">
          <p className="text-justify">{content.fundamentalsPRS}</p>
        </DataCard>
        <DataCard title="Utility for Doctors and Dietitians">
          <p className="text-justify">{content.utilityDoctors}</p>
        </DataCard>
        <DataCard title="Microarray Explanation">
          <p className="text-justify">{content.microarrayExplanation}</p>
        </DataCard>
        <DataCard title="Your Microarray Data">
          <p className="text-justify">{content.microarrayData}</p>
        </DataCard>
      </div>
      <Separator className="my-12" />

      {/* Dynamic Diet Analysis */}
      <SectionTitle title="Diet Analysis" icon="🍎" />
      {Object.keys(groupedDietFields).length === 0 && (
        <p className="text-center text-gray-500 italic">No diet analysis results available.</p>
      )}
      {Object.entries(groupedDietFields).map(([category, fields]) => (
        <React.Fragment key={category}>
          <SubSectionTitle title={category} icon="🍽️" />
          <div className="grid md:grid-cols-2 gap-6 mb-8">
            {fields.map((data, index) => (
              <DataCard key={index} title={data.label}>
                <p>
                  <strong>Score:</strong> {data.score}/10
                </p>
                <p>
                  <strong>Level:</strong> {data.level}
                </p>
                <p>
                  <strong>Recommendation:</strong> {data.recommendation}
                </p>
              </DataCard>
            ))}
          </div>
        </React.Fragment>
      ))}
      <Separator className="my-12" />

      {/* Nutrition Data */}
      <SectionTitle title="Nutrition Analysis" icon="💊" />
      <SubSectionTitle title="Vitamins" icon="💊" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(nutritionData.vitamins).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Score:</strong> {data.score}/10
            </p>
            <p>
              <strong>Health Impact:</strong> {data.healthImpact}
            </p>
            <p>
              <strong>Intake Level:</strong> {data.intakeLevel}
            </p>
            <p>
              <strong>Source:</strong> {data.source}
            </p>
          </DataCard>
        ))}
      </div>

      <SubSectionTitle title="Fatty Acids" icon="🐟" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(nutritionData.fattyAcids).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Score:</strong> {data.score}/10
            </p>
            <p>
              <strong>Health Impact:</strong> {data.healthImpact}
            </p>
            <p>
              <strong>Intake Level:</strong> {data.intakeLevel}
            </p>
            <p>
              <strong>Source:</strong> {data.source}
            </p>
          </DataCard>
        ))}
      </div>

      <SubSectionTitle title="Essential Elements" icon="⚡" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(nutritionData.elements).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Score:</strong> {data.score}/10
            </p>
            <p>
              <strong>Health Impact:</strong> {data.healthImpact}
            </p>
            <p>
              <strong>Intake Level:</strong> {data.intakeLevel}
            </p>
            <p>
              <strong>Source:</strong> {data.source}
            </p>
          </DataCard>
        ))}
      </div>

      <SubSectionTitle title="Complex Nutrients" icon="🌿" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(nutritionData.complexNutrients).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Score:</strong> {data.score}/10
            </p>
            <p>
              <strong>Health Impact:</strong> {data.healthImpact}
            </p>
            <p>
              <strong>Intake Level:</strong> {data.intakeLevel}
            </p>
            <p>
              <strong>Source:</strong> {data.source}
            </p>
          </DataCard>
        ))}
      </div>
      <Separator className="my-12" />

      {/* Sports & Fitness */}
      <SectionTitle title="Sports & Fitness" icon="🏃‍♂️" />
      <SubSectionTitle title="Exercise Type Suitability" icon="🏃‍♂️" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(sportsAndFitness.exerciseType).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Level:</strong> {data.level}
            </p>
            <p>
              <strong>Description:</strong> {data.description}
            </p>
          </DataCard>
        ))}
      </div>

      <SubSectionTitle title="Performance Factors" icon="⚡" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(sportsAndFitness.performance).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Level:</strong> {data.level}
            </p>
            <p>
              <strong>Description:</strong> {data.description}
            </p>
          </DataCard>
        ))}
      </div>
      <Separator className="my-12" />

      {/* Lifestyle Conditions */}
      <SectionTitle title="Lifestyle Conditions" icon="🩺" />
      <SubSectionTitle title="Heart & Vascular Health" icon="❤️" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(lifestyleConditions.heartVascularHealth).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Status:</strong> <Badge className={getStatusColor(data.status)}>{data.status}</Badge>
            </p>
          </DataCard>
        ))}
      </div>

      <SubSectionTitle title="Diabesity (Diabetes & Obesity)" icon="🍬" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(lifestyleConditions.diabesity).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Status:</strong> <Badge className={getStatusColor(data.status)}>{data.status}</Badge>
            </p>
          </DataCard>
        ))}
      </div>

      <SubSectionTitle title="Liver Health" icon="🧫" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(lifestyleConditions.liverHealth).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Status:</strong> <Badge className={getStatusColor(data.status)}>{data.status}</Badge>
            </p>
          </DataCard>
        ))}
      </div>

      <SubSectionTitle title="Bone Health" icon="🦴" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(lifestyleConditions.boneHealth).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Status:</strong> <Badge className={getStatusColor(data.status)}>{data.status}</Badge>
            </p>
          </DataCard>
        ))}
      </div>

      <SubSectionTitle title="Gut Health" icon="🦠" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(lifestyleConditions.gutHealth).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Status:</strong> <Badge className={getStatusColor(data.status)}>{data.status}</Badge>
            </p>
          </DataCard>
        ))}
      </div>

      <SubSectionTitle title="Hormone System" icon="🧪" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(lifestyleConditions.hormoneSystem).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Status:</strong> <Badge className={getStatusColor(data.status)}>{data.status}</Badge>
            </p>
          </DataCard>
        ))}
      </div>
      <Separator className="my-12" />

      {/* Metabolic Core */}
      <SectionTitle title="Metabolic Core" icon="🧬" />
      <div className="space-y-8 mb-8">
        {Object.entries(metabolicCore).map(([key, data]) => (
          <Card key={key} className="border-2 border-purple-200 bg-purple-50/50 shadow-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg font-semibold text-purple-800 flex items-center justify-between">
                {key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}
                <Badge className={getImpactColor(data.impact)}>{data.impact}</Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-gray-700 space-y-2">
              <p>
                <strong>Genes:</strong> {data.genes.join(", ")}
              </p>
              <p>
                <strong>Your Genotype:</strong> <span className="font-mono">{data.genotype}</span>
              </p>
              <p>
                <strong>Advice:</strong> {data.advice}
              </p>
            </CardContent>
          </Card>
        ))}
      </div>
      <Separator className="my-12" />

      {/* Digestive Health */}
      <SectionTitle title="Digestive Health" icon="🦠" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(digestiveHealth).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Level:</strong> {data.level}
            </p>
            <p>
              <strong>Description:</strong> {data.description}
            </p>
          </DataCard>
        ))}
      </div>
      <Separator className="my-12" />

      {/* Genes & Addiction */}
      <SectionTitle title="Genes & Addiction" icon="🔗" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(genesAndAddiction).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Tendency:</strong> {data.tendency}
            </p>
            <p>
              <strong>Description:</strong> {data.description}
            </p>
          </DataCard>
        ))}
      </div>
      <Separator className="my-12" />

      {/* Sleep & Rest */}
      <SectionTitle title="Sleep & Rest" icon="😴" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(sleepAndRest).map(([key, data]) => (
          <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
            <p>
              <strong>Impact:</strong> {data.impact}
            </p>
            <p>
              <strong>Intervention:</strong> {data.intervention}
            </p>
          </DataCard>
        ))}
      </div>
      <Separator className="my-12" />

      {/* Allergies & Sensitivity */}
      <SectionTitle title="Allergies & Sensitivity" icon="🤧" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        {Object.entries(allergiesAndSensitivity)
          .filter(([key]) => key !== "generalAdvice")
          .map(([key, data]) => (
            <DataCard key={key} title={key.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase())}>
              <p>
                <strong>Tendency:</strong> {(data as AllergyData).tendency}
              </p>
            </DataCard>
          ))}
      </div>
      <DataCard title="General Advice" className="mt-8">
        <p className="text-justify">{allergiesAndSensitivity.generalAdvice}</p>
      </DataCard>
      <Separator className="my-12" />

      {/* Preventive Health */}
      <SectionTitle title="Preventive Health" icon="🏥" />
      <SubSectionTitle title="Diagnostic Tests" icon="🧪" />
      <div className="grid md:grid-cols-2 gap-6 mb-8">
        <DataCard title="Half-Yearly Tests">
          <ul className="list-disc list-inside">
            {preventiveHealth.diagnosticTests.halfYearly.map((test, index) => (
              <li key={index}>{test}</li>
            ))}
          </ul>
        </DataCard>
        <DataCard title="Yearly Tests">
          <ul className="list-disc list-inside">
            {preventiveHealth.diagnosticTests.yearly.map((test, index) => (
              <li key={index}>{test}</li>
            ))}
          </ul>
        </DataCard>
      </div>

      <SubSectionTitle title="Nutritional Supplements" icon="💊" />
      <DataCard title="Recommended Supplements">
        <ul className="list-disc list-inside">
          {preventiveHealth.nutritionalSupplements.map((supplement, index) => (
            <li key={index}>
              {supplement.supplement} {supplement.needed ? "(Needed)" : "(Optional)"}
            </li>
          ))}
        </ul>
      </DataCard>
      <Separator className="my-12" />

      {/* Family Genetic Impact */}
      <SectionTitle title="Family Genetic Impact" icon="👨‍👩‍👧‍👦" />
      <div className="space-y-8 mb-8">
        {familyGeneticImpact.length === 0 && (
          <p className="text-center text-gray-500 italic">No family genetic impacts recorded.</p>
        )}
        {familyGeneticImpact.map((impact, index) => (
          <Card key={index} className="border-2 border-blue-200 bg-blue-50/50 shadow-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg font-semibold text-blue-800">Genetic Impact #{index + 1}</CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-gray-700 space-y-2">
              <p>
                <strong>Gene:</strong> {impact.gene}
              </p>
              <p>
                <strong>Normal/Common Alleles:</strong> {impact.normalAlleles}
              </p>
              <p>
                <strong>Your Result:</strong> <span className="font-mono">{impact.yourResult}</span>
              </p>
              <p>
                <strong>Health Impact:</strong> {impact.healthImpact}
              </p>
            </CardContent>
          </Card>
        ))}
      </div>
      <Separator className="my-12" />

      {/* Gene Test Results */}
      <SectionTitle title="Gene Test Results" icon="🔬" />
      <div className="space-y-8 mb-8">
        {geneTestResults.length === 0 && (
          <p className="text-center text-gray-500 italic">No gene test results recorded.</p>
        )}
        {geneTestResults.map((result, index) => (
          <Card key={index} className="border-2 border-indigo-200 bg-indigo-50/50 shadow-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg font-semibold text-indigo-800">Gene: {result.geneName}</CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-gray-700 space-y-2">
              <p>
                <strong>Variation:</strong> <span className="font-mono">{result.variation}</span>
              </p>
              <p>
                <strong>Result:</strong> <span className="font-mono">{result.result}</span>
              </p>
            </CardContent>
          </Card>
        ))}
      </div>
      <Separator className="my-12" />

      {/* Summaries */}
      <SectionTitle title="Summaries for Experts" icon="📊" />
      <div className="space-y-8 mb-8">
        <DataCard title="Nutrigenomics Summary">
          <p className="text-justify">{summaries.nutrigenomicsSummary}</p>
        </DataCard>
        <DataCard title="Exercise Genomics Summary">
          <p className="text-justify">{summaries.exerciseGenomicsSummary}</p>
        </DataCard>
      </div>

      {/* Report Footer */}
      <footer className="text-center mt-12 py-6 text-gray-600 text-sm border-t border-gray-200">
        <p>
          &copy; {new Date().getFullYear()} {settings.companyName}. All rights reserved.
        </p>
        <p>Report Authentication: {patientInfo.reportAuth}</p>
      </footer>
    </div>
  )
}
